# Generated by Django 4.2.3 on 2024-09-07 15:31

from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PongueUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=50, unique=True, verbose_name='Username')),
                ('access_token', models.CharField(blank=True, max_length=50, verbose_name='Token')),
                ('display_name', models.CharField(max_length=50, verbose_name='Display name')),
                ('nickname', models.CharField(blank=True, default='', max_length=50, verbose_name='Tournaments nickname')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('avatar_base64', models.TextField(blank=True, default='', verbose_name='Avatar')),
                ('status', models.CharField(choices=[('ON', 'Online'), ('OFF', 'Offline'), ('L_GAME', 'Looking for a game'), ('L_TOURNAMENT', 'Looking for a tournament'), ('IN_GAME', 'Playing a game'), ('IN_TOURNAMENT', 'Registered on a tournament'), ('H_TOURNAMENT', 'Hosting a tournament')], default='OFF', max_length=25, verbose_name='Status')),
                ('games_won', models.IntegerField(default=0, verbose_name='Wins')),
                ('games_lost', models.IntegerField(default=0, verbose_name='Losses')),
                ('games_played', models.IntegerField(default=0, verbose_name='Games played')),
                ('tournaments', models.IntegerField(default=0, verbose_name='Tournaments played')),
                ('tournaments_won', models.IntegerField(default=0, verbose_name='Tournaments won')),
                ('has_2fa', models.BooleanField(default=False, verbose_name='2FA activated')),
                ('from_42', models.BooleanField(default=False, verbose_name='42 User')),
                ('points', models.BigIntegerField(default=0, verbose_name='Ranking points')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_player_1', to=settings.AUTH_USER_MODEL)),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_player_2', to=settings.AUTH_USER_MODEL)),
                ('player_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_player_3', to=settings.AUTH_USER_MODEL)),
                ('player_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournament_player_4', to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Tournaments',
                'verbose_name_plural': 'Tournaments',
                'db_table': 'Tournaments',
            },
        ),
        migrations.CreateModel(
            name='PlayerFriend',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('BLOCKED', 'Blocked')], default='PENDING', max_length=10)),
                ('registerDate', models.DateField(auto_now_add=True)),
                ('myFriend', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='my_friend', to=settings.AUTH_USER_MODEL)),
                ('myUser', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='my_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GameResults',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('player_1_score', models.IntegerField(verbose_name='Player 1 Score')),
                ('player_2_score', models.IntegerField(verbose_name='Player 2 Score')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('player_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_1', to=settings.AUTH_USER_MODEL)),
                ('player_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Result',
                'verbose_name_plural': 'Results',
                'db_table': 'Results',
            },
        ),
        migrations.AddField(
            model_name='pongueuser',
            name='friends',
            field=models.ManyToManyField(blank=True, through='pongue.PlayerFriend', to=settings.AUTH_USER_MODEL, verbose_name='Friends'),
        ),
        migrations.AddField(
            model_name='pongueuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='pongueuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
